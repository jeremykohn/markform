from markform.helpers.parse_line import parse_line

all_99_test_cases = ['', ' ', '   \n[ +]', '   \n[ -]', '    [+]', '    [-]', '   [+]', '   [-]', '  [+++] ', '  [+]', '  [-]', ' [+]', ' [+] ', ' [-]', '+]', 'Content [+]', 'Content [-]', 'Element and pre-element text [+   +]', 'Form [+] start', 'Might be a form start element [[+   +] ] certainly not a textarea', 'Might be a textarea [[[ the validation might be taken care of later]]]', 'No element', 'No element [[ on this line', 'No element [[] on this line', 'No element here', 'Non-element text', 'Not a [+ element', 'Pre- and [+] post-text', 'Pre-text [+]', 'Textarea [[]] element', 'Yes [+   +] an element', 'Yes [+  +]+] an element', 'Yes [+++ + all sorts of text in here++++] an element', 'Yes [[+   +]] element', 'Yes valid element [[{[ with all sorts of text in here  }]}]] and text afterwards', '[ + ]', '[ - ]', '[(( ))]', '[(())]', '[()]', '[([])]', '[(]', '[(]]', '[)]', '[+', '[+    +] element and post-element text', '[+  Inner content +]', '[+  Inner content+]', '[+ ++]', '[+ +]', '[+ +]+]', '[+ -]', '[+ Content +]', '[+ Inner content  +]', '[+ Inner content +]', '[+ Inner content+]', '[+ ]', '[++ ++]', '[++ +]', '[+++]', '[++]', '[+-]', '[+Inner content +]', '[+Inner content+]', '[+]', '[+]\n\n[-]', '[+]\n\n[_]', '[+]\n\n[_]\n\n[-]', '[+]\n\n[_]\n[-]', '[+]\n[-]', '[+]\n[_]', '[+]\n[_]\n\n[-]', '[+]\n[_]\n[-]', '[+] ', '[+] Content [-]', '[+] [-]', '[+] [_] [-]', '[+] post-text', '[- +]', '[- -]', '[- Content -]', '[- ]', '[-+]', '[---]', '[--]', '[-]', '[-]\n[_]', '[-]\n[_]\n[+]', '[-] Content [+]', '[-] [+]', '[[()]]', '[[()]]', '[[)]', '[[[ ]]]', '[[[]]]', '[[]]', '[]', '[_]', '[_]\n[-]']

# Test these here.
single_line_test_cases = [case for case in all_99_test_cases if "\n" not in case]

# Test these later, separately.
multiple_line_test_cases = [case for case in all_99_test_cases if "\n" in case]

# Test line parsing.
parsed_lines = {}
for case in single_line_test_cases:
    parsed_lines[case] = parse_line(case)

# Print results.
for case in sorted(parsed_lines.keys()):
    print("'" + case + "'")
    for key in reversed(sorted(parsed_lines[case].keys())):
        print("{}: '{}'".format(key, parsed_lines[case][key]))
    print("")

"""

Results:
    
    ''
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    ' '
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '    [+]'
    pre_element_content: '    '
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '    [-]'
    pre_element_content: '    '
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ''
    element_text: '[-]'
    closing_identifier: '-'

    '   [+]'
    pre_element_content: '   '
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '   [-]'
    pre_element_content: '   '
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ''
    element_text: '[-]'
    closing_identifier: '-'

    '  [+++] '
    pre_element_content: '  '
    post_element_content: ' '
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+++]'
    closing_identifier: '+'

    '  [+]'
    pre_element_content: '  '
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '  [-]'
    pre_element_content: '  '
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ''
    element_text: '[-]'
    closing_identifier: '-'

    ' [+]'
    pre_element_content: ' '
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    ' [+] '
    pre_element_content: ' '
    post_element_content: ' '
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    ' [-]'
    pre_element_content: ' '
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ''
    element_text: '[-]'
    closing_identifier: '-'

    '+]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    'Content [+]'
    pre_element_content: 'Content '
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    'Content [-]'
    pre_element_content: 'Content '
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ''
    element_text: '[-]'
    closing_identifier: '-'

    'Element and pre-element text [+   +]'
    pre_element_content: 'Element and pre-element text '
    post_element_content: ''
    opening_identifier: '+'
    inner_content: '   '
    element_text: '[+   +]'
    closing_identifier: '+'

    'Form [+] start'
    pre_element_content: 'Form '
    post_element_content: ' start'
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    'Might be a form start element [[+   +] ] certainly not a textarea'
    pre_element_content: 'Might be a form start element ['
    post_element_content: ' ] certainly not a textarea'
    opening_identifier: '+'
    inner_content: '   '
    element_text: '[+   +]'
    closing_identifier: '+'

    'Might be a textarea [[[ the validation might be taken care of later]]]'
    pre_element_content: 'Might be a textarea '
    post_element_content: ']'
    opening_identifier: '['
    inner_content: '[ the validation might be taken care of later'
    element_text: '[[[ the validation might be taken care of later]]'
    closing_identifier: ']'

    'No element'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    'No element [[ on this line'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    'No element [[] on this line'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    'No element here'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    'Non-element text'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    'Not a [+ element'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    'Pre- and [+] post-text'
    pre_element_content: 'Pre- and '
    post_element_content: ' post-text'
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    'Pre-text [+]'
    pre_element_content: 'Pre-text '
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    'Textarea [[]] element'
    pre_element_content: 'Textarea '
    post_element_content: ' element'
    opening_identifier: '['
    inner_content: ''
    element_text: '[[]]'
    closing_identifier: ']'

    'Yes [+   +] an element'
    pre_element_content: 'Yes '
    post_element_content: ' an element'
    opening_identifier: '+'
    inner_content: '   '
    element_text: '[+   +]'
    closing_identifier: '+'

    'Yes [+  +]+] an element'
    pre_element_content: 'Yes '
    post_element_content: '+] an element'
    opening_identifier: '+'
    inner_content: '  '
    element_text: '[+  +]'
    closing_identifier: '+'

    'Yes [+++ + all sorts of text in here++++] an element'
    pre_element_content: 'Yes '
    post_element_content: ' an element'
    opening_identifier: '+'
    inner_content: ' + all sorts of text in here'
    element_text: '[+++ + all sorts of text in here++++]'
    closing_identifier: '+'

    'Yes [[+   +]] element'
    pre_element_content: 'Yes '
    post_element_content: ' element'
    opening_identifier: '['
    inner_content: '+   +'
    element_text: '[[+   +]]'
    closing_identifier: ']'

    'Yes valid element [[{[ with all sorts of text in here  }]}]] and text afterwards'
    pre_element_content: 'Yes valid element '
    post_element_content: ' and text afterwards'
    opening_identifier: '['
    inner_content: '{[ with all sorts of text in here  }]}'
    element_text: '[[{[ with all sorts of text in here  }]}]]'
    closing_identifier: ']'

    '[ + ]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[ - ]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[(( ))]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '('
    inner_content: '( )'
    element_text: '[(( ))]'
    closing_identifier: ')'

    '[(())]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '('
    inner_content: '()'
    element_text: '[(())]'
    closing_identifier: ')'

    '[()]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '('
    inner_content: ''
    element_text: '[()]'
    closing_identifier: ')'

    '[([])]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '('
    inner_content: '[]'
    element_text: '[([])]'
    closing_identifier: ')'

    '[(]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[(]]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[)]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[+'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[+    +] element and post-element text'
    pre_element_content: ''
    post_element_content: ' element and post-element text'
    opening_identifier: '+'
    inner_content: '    '
    element_text: '[+    +]'
    closing_identifier: '+'

    '[+  Inner content +]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: '  Inner content '
    element_text: '[+  Inner content +]'
    closing_identifier: '+'

    '[+  Inner content+]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: '  Inner content'
    element_text: '[+  Inner content+]'
    closing_identifier: '+'

    '[+ ++]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ' '
    element_text: '[+ ++]'
    closing_identifier: '+'

    '[+ +]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ' '
    element_text: '[+ +]'
    closing_identifier: '+'

    '[+ +]+]'
    pre_element_content: ''
    post_element_content: '+]'
    opening_identifier: '+'
    inner_content: ' '
    element_text: '[+ +]'
    closing_identifier: '+'

    '[+ -]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[+ Content +]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ' Content '
    element_text: '[+ Content +]'
    closing_identifier: '+'

    '[+ Inner content  +]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ' Inner content  '
    element_text: '[+ Inner content  +]'
    closing_identifier: '+'

    '[+ Inner content +]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ' Inner content '
    element_text: '[+ Inner content +]'
    closing_identifier: '+'

    '[+ Inner content+]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ' Inner content'
    element_text: '[+ Inner content+]'
    closing_identifier: '+'

    '[+ ]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[++ ++]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ' '
    element_text: '[++ ++]'
    closing_identifier: '+'

    '[++ +]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ' '
    element_text: '[++ +]'
    closing_identifier: '+'

    '[+++]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+++]'
    closing_identifier: '+'

    '[++]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[++]'
    closing_identifier: '+'

    '[+-]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[+Inner content +]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: 'Inner content '
    element_text: '[+Inner content +]'
    closing_identifier: '+'

    '[+Inner content+]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: 'Inner content'
    element_text: '[+Inner content+]'
    closing_identifier: '+'

    '[+]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '[+] '
    pre_element_content: ''
    post_element_content: ' '
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '[+] Content [-]'
    pre_element_content: ''
    post_element_content: ' Content [-]'
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '[+] [-]'
    pre_element_content: ''
    post_element_content: ' [-]'
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '[+] [_] [-]'
    pre_element_content: ''
    post_element_content: ' [_] [-]'
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '[+] post-text'
    pre_element_content: ''
    post_element_content: ' post-text'
    opening_identifier: '+'
    inner_content: ''
    element_text: '[+]'
    closing_identifier: '+'

    '[- +]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[- -]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ' '
    element_text: '[- -]'
    closing_identifier: '-'

    '[- Content -]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ' Content '
    element_text: '[- Content -]'
    closing_identifier: '-'

    '[- ]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[-+]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[---]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ''
    element_text: '[---]'
    closing_identifier: '-'

    '[--]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ''
    element_text: '[--]'
    closing_identifier: '-'

    '[-]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '-'
    inner_content: ''
    element_text: '[-]'
    closing_identifier: '-'

    '[-] Content [+]'
    pre_element_content: ''
    post_element_content: ' Content [+]'
    opening_identifier: '-'
    inner_content: ''
    element_text: '[-]'
    closing_identifier: '-'

    '[-] [+]'
    pre_element_content: ''
    post_element_content: ' [+]'
    opening_identifier: '-'
    inner_content: ''
    element_text: '[-]'
    closing_identifier: '-'

    '[[()]]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '['
    inner_content: '()'
    element_text: '[[()]]'
    closing_identifier: ']'

    '[[)]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[[[ ]]]'
    pre_element_content: ''
    post_element_content: ']'
    opening_identifier: '['
    inner_content: '[ '
    element_text: '[[[ ]]'
    closing_identifier: ']'

    '[[[]]]'
    pre_element_content: ''
    post_element_content: ']'
    opening_identifier: '['
    inner_content: '['
    element_text: '[[[]]'
    closing_identifier: ']'

    '[[]]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '['
    inner_content: ''
    element_text: '[[]]'
    closing_identifier: ']'

    '[]'
    pre_element_content: 'None'
    post_element_content: 'None'
    opening_identifier: 'None'
    inner_content: 'None'
    element_text: 'None'
    closing_identifier: 'None'

    '[_]'
    pre_element_content: ''
    post_element_content: ''
    opening_identifier: '_'
    inner_content: ''
    element_text: '[_]'
    closing_identifier: '_'


"""

# Confirm that all these are right.

# Later, test identification of element type, based on opening identifer.
# (That's in `convert_text.py`, I believe.)
# Standalone elements like `[+]`, [+++] should have an element type and no inner content.
